<?php

/**
 * @file
 * Unique value for cck fields check module.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\Entity\BaseFieldOverride;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityType;

/**
 * Implements hook_help().
 */
function unique_field_ajax_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the unique_field_ajax module.
    case 'help.page.unique_field_ajax':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Unique Field module allows administrators to require that content supplied for specified fields is unique.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Removes the default values form from the field settings page.
 * Users expect to use the default value form to predefine only certain values
 * on the widget, but Drupal expects the default value to be complete, and used
 * whenever an actual address isn't provided. Therefore it's preferable to
 * hide this functionality and implement our own via custom widget settings.
 */
function unique_field_ajax_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $field = $form_state->getFormObject()->getEntity();
  $unique_field_ajax_types = [
    'string',
    'list_string',
    'text',
    'email',
    'entity_reference',
    'path',
    'uri',
  ];
  if (!$field->getFieldStorageDefinition()->isMultiple()) {
    if (in_array($field->getType(), $unique_field_ajax_types)) {

      $form['third_party_settings']['unique_field_ajax']['unique'] = [
        '#type' => 'checkbox',
        '#title' => t("Unique"),
        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'unique'),
        '#weight' => -10,
      ];

        $form['third_party_settings']['unique_field_ajax']['warn_only'] = [
        '#type' => 'checkbox',
        '#title' => t("Warn only"),
        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'warn_only'),
        '#weight' => -9,
        '#states' => [
          'visible' => [
            ':input[name="third_party_settings[unique_field_ajax][unique]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      $form['third_party_settings']['unique_field_ajax']['per_lang'] = [
        '#type' => 'checkbox',
        '#title' => t("Per Language"),
        '#description' => t("Do not allow duplicated content per language"),
        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'per_lang'),
        '#weight' => -8,
        '#states' => [
          'visible' => [
            ':input[name="third_party_settings[unique_field_ajax][unique]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      $form['third_party_settings']['unique_field_ajax']['use_ajax'] = [
        '#type' => 'checkbox',
        '#title' => t("Use Ajax"),
        '#description' => t("Use ajax for validation."),
        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'use_ajax'),
        '#weight' => -7,
        '#states' => [
          'visible' => [
            ':input[name="third_party_settings[unique_field_ajax][unique]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      $form['third_party_settings']['unique_field_ajax']['message'] = [
        '#type' => 'textarea',
        '#title' => t("Error message"),
        '#description' => t("The message to show under the field when the value is not unique"),
        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'message'),
        '#weight' => -6,
        '#states' => [
          'visible' => [
            ':input[name="third_party_settings[unique_field_ajax][unique]"]' => ['checked' => TRUE],
          ],
        ],
      ];

    }
  }
}

/**
 * Alter forms to add unique title checkbox
 *   - node type add/edit.
 *
 * @param [type] $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param [type] $form_id
 *
 * @return void
 */
function unique_field_ajax_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (_unique_field_ajax_is_config_form($form_id)) {
    $entity = $form_state->getFormObject()->getEntity();
    $form['unique_field_ajax'] = [
      '#type' => 'details',
      '#group' => 'additional_settings',
      '#title' => t('Unique title settings'),
    ];
    $form['unique_field_ajax']['unique_field_ajax_unique_title'] = [
      '#type' => 'checkbox',
      '#title' => t("Enforce unique title"),
      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'unique_title'),
      '#description' => t('Validate that nodes within this bundle do not have duplicate titles'),
      '#weight' => -10,
    ];
    $form['unique_field_ajax']['unique_field_ajax_warn_only'] = [
      '#type' => 'checkbox',
      '#title' => t("Warn only"),
      '#description' => t("Set if saving is always possible"),
      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'warn_only'),
      '#weight' => -9,
      '#states' => [
        'visible' => [
          ':input[name="unique_field_ajax_unique_title"]' => ['checked' => TRUE],
        ],
      ],
    ];
    $form['unique_field_ajax']['unique_field_ajax_per_lang'] = [
      '#type' => 'checkbox',
      '#title' => t("Per Language"),
      '#description' => t("Do not allow duplicated content per language"),
      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'per_lang'),
      '#weight' => -8,
      '#states' => [
        'visible' => [
          ':input[name="unique_field_ajax_unique_title"]' => ['checked' => TRUE],
        ],
      ],
    ];
    $form['unique_field_ajax']['unique_field_ajax_use_ajax'] = [
      '#type' => 'checkbox',
      '#title' => t("Use Ajax"),
      '#description' => t("Use ajax for validation."),
      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'use_ajax'),
      '#weight' => -7,
      '#states' => [
        'visible' => [
          ':input[name="unique_field_ajax_unique_title"]' => ['checked' => TRUE],
        ],
      ],
    ];
    $form['unique_field_ajax']['unique_field_ajax_message'] = [
      '#type' => 'textarea',
      '#title' => t("Error message"),
      '#description' => t("The message to show under the field when the value is not unique"),
      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'message'),
      '#weight' => -6,
      '#states' => [
        'visible' => [
          ':input[name="unique_field_ajax_unique_title"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['#entity_builders'][] = '_unique_field_ajax_entity_form_builder';
  }
}

/**
 * Determine if this is a form for titleable entity config.
 *
 * @param string $form_id
 *
 * @return bool
 */
function _unique_field_ajax_is_config_form($form_id) {
  // TODO: can this be generalized?
  $entity_config_forms = [
    'node_type_edit_form', 'node_type_add_form',
  ];
  return in_array($form_id, $entity_config_forms);
}

/**
 * Save the third-party setting.
 *
 * @param [type] $entity_type
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param [type] $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return void
 */
function _unique_field_ajax_entity_form_builder($entity_type, EntityInterface $entity, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('unique_field_ajax_unique_title')) {
    $entity->setThirdPartySetting('unique_field_ajax', 'unique_title', $form_state->getValue('unique_field_ajax_unique_title'));
  }
  else {
    $entity->unsetThirdPartySetting('unique_field_ajax', 'unique_title');
  }

  if ($form_state->getValue('unique_field_ajax_warn_only')) {
    $entity->setThirdPartySetting('unique_field_ajax', 'warn_only', $form_state->getValue('unique_field_ajax_warn_only'));
  }
  else {
    $entity->unsetThirdPartySetting('unique_field_ajax', 'warn_only');
  }

  if ($form_state->getValue('unique_field_ajax_per_lang')) {
    $entity->setThirdPartySetting('unique_field_ajax', 'per_lang', $form_state->getValue('unique_field_ajax_per_lang'));
  }
  else {
    $entity->unsetThirdPartySetting('unique_field_ajax', 'per_lang');
  }

  if ($form_state->getValue('unique_field_ajax_use_ajax')) {
    $entity->setThirdPartySetting('unique_field_ajax', 'use_ajax', $form_state->getValue('unique_field_ajax_use_ajax'));
  }
  else {
    $entity->unsetThirdPartySetting('unique_field_ajax', 'use_ajax');
  }

  $entity->setThirdPartySetting('unique_field_ajax', 'message', $form_state->getValue('unique_field_ajax_message'));
}

/**
 * Attaching data to unique fields.
 *
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $context
 */
function unique_field_ajax_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $name = $field_definition->getFieldStorageDefinition()->getName();
  $is_unique_per_lang = NULL;

  if ($field_definition instanceof FieldConfig) {
    $label = $field_definition->label();
    if ($field_definition->getThirdPartySetting('unique_field_ajax', 'unique')) {
      if (_unique_field_ajax_language_id_exists()) {
        $is_unique_per_lang = $field_definition->getThirdPartySetting('unique_field_ajax', 'per_lang');
      }
      $message = $field_definition->getThirdPartySetting('unique_field_ajax', 'message');
      $use_ajax = $field_definition->getThirdPartySetting('unique_field_ajax', 'use_ajax');
      $warn_only = $field_definition->getThirdPartySetting('unique_field_ajax', 'warn_only');
      _unique_field_ajax_inject_validation($element, $is_unique_per_lang, $warn_only, $name, $label, $message, $use_ajax);
    }
  }

  // Check if this is the title (base field label) and if the parent entity enforces unique titles.
  if ($field_definition instanceof BaseFieldDefinition ||
      $field_definition instanceof BaseFieldOverride) {
    $entity = NULL;
    // IEF support.
    if (isset($context['form']) && isset($context['form']['#type']) && $context['form']['#type'] == 'inline_entity_form') {
      $entity = $context['form']['#default_value'];
    }
    else {
      $form_object = $form_state->getFormObject();
      if (method_exists($form_object, 'getEntity')) {
        $entity = $form_object->getEntity();
      }
    }
    if ($entity) {
      $entity_type = $entity->getEntityType();
      if (($entity_type instanceof ContentEntityType) && $entity_type->hasKey('label')) {
        $entity_label = $entity_type->getKey('label');
        if ($entity_label == $name) {
          $bundle_def_id = $entity_type->getBundleEntityType();
          if ($bundle_def_id) {
            $bundle_def = \Drupal::service('entity_type.manager')->getStorage($bundle_def_id)->load($entity->bundle());
            if ($bundle_def->getThirdPartySetting('unique_field_ajax', 'unique_title')) {
              if (_unique_field_ajax_language_id_exists()) {
                $is_unique_per_lang = $bundle_def->getThirdPartySetting('unique_field_ajax', 'per_lang');
              }
              $message = $bundle_def->getThirdPartySetting('unique_field_ajax', 'message');
              $use_ajax = $bundle_def->getThirdPartySetting('unique_field_ajax', 'use_ajax');
              $warn_only = $bundle_def->getThirdPartySetting('unique_field_ajax', 'warn_only');
              _unique_field_ajax_inject_validation($element, $is_unique_per_lang, $warn_only, $name, $name, $message, $use_ajax);
            }
          }
        }
      }
    }
  }
}

/**
 * Return the current language ID if it exists.
 *
 * @return string
 */
function _unique_field_ajax_language_id_exists() {
  return (\Drupal::moduleHandler()->moduleExists('language'))
    && \Drupal::languageManager()
      ->getCurrentLanguage()
      ->getId();
}

/**
 * Place the validators on the element.
 *
 * @param array $element
 * @param bool $is_unique_per_lang
 * @param bool $warn_only
 * @param string $name
 * @param string $label
 * @param string $message
 *
 * @return void
 */
function _unique_field_ajax_inject_validation(&$element, $is_unique_per_lang, $warn_only, $name, $label, $message, $use_ajax) {
  $element['value']['#unique_field_ajax_settings'] = [
    'per_lang' => $is_unique_per_lang,
    'warn_only' => $warn_only,
    'field_name' => $name,
    'field_label' => $label,
    'message' => $message,
  ];

  $element['value']['#element_validate'][] = 'unique_field_ajax_validate_unique';
  if ($use_ajax) {
    $element['#process'] = ['_unique_field_ajax_process'];
  }
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return mixed
 */
function _unique_field_ajax(array &$form, FormStateInterface $form_state) {
  $element = $form_state->getTriggeringElement();

  return NestedArray::getValue(
    $form,
    $element['#array_parents']);
}

/**
 * Attach ajax to unique field.
 *
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form
 *
 * @return mixed
 */
function _unique_field_ajax_process($element, FormStateInterface &$form_state, &$form) {
  $field_name = $element['value']['#unique_field_ajax_settings']['field_name'];
  $field_label = $element['value']['#unique_field_ajax_settings']['field_label'];
  $message = $element['value']['#unique_field_ajax_settings']['message'];
  $wrapper = 'unique-' . $field_name;
  if (!empty($form['#attached']['library']) && !in_array('unique_field_ajax/unique_event', $form['#attached']['library'])) {
    $form['#attached']['library'][] = 'unique_field_ajax/unique_event';
  }
  $settings = ['id' => '#' . $wrapper . ' input'];
  $form['#attached']['drupalSettings']['unique_field_ajax'][] = $settings;
  $element['value']['#ajax'] = [
    'callback' => '_unique_field_ajax',
    'event' => 'finishedinput',
    'wrapper' => $wrapper,
    'progress' => [
      'type' => 'throbber',
      'message' => t('Verifying @field_label...', ['@field_label' => $field_label]),
    ],
  ];
  $element['value']['#prefix'] = '<div id="' . $wrapper . '">';
  $element['value']['#suffix'] = '</div>';
  $value = $form_state->getValue($field_name);
  $value = !empty($value) ? $value[0]['value'] : NULL;

  $entity = $form_state->getFormObject()->getEntity();
  $entity_type = $entity->getEntityTypeId();
  $langcode = (!empty($form_state->getValues()['langcode'][0]['value'])) ?
    $form_state->getValues()['langcode'][0]['value'] : '0';
  $valid = unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $value, $entity->bundle(), $element['value']['#unique_field_ajax_settings']['per_lang'], $entity);
  if (empty($message)) {
    $message = t('This field has to be unique.');
  }
  if (!$valid) {
    $element['value']['#attributes']['class'][] = 'error';
    $element['value']['#attributes']['aria-invalid'] = 'true';
    $element['value']['#suffix'] = '<div class="error">' . $message . '</div>' . $element['value']['#suffix'];
  }
  return ($element);
}

/**
 * Ajax callback to validate the email field.
 */
function unique_field_ajax_validate_unique($element, FormStateInterface $form_state, array $form) {
  $entity = $form_state->getFormObject()->getEntity();
  // If !isset langcode set it to 0.
  $langcode = (
    !empty($form_state->getValues()['langcode'][0]['value']) &&
      $form_state->getValues()['langcode'][0]['value']) ?
      $form_state->getValues()['langcode'][0]['value'] : '0';

  $field_name = $element['#unique_field_ajax_settings']['field_name'];
  $field_label = $element['#unique_field_ajax_settings']['field_label'];
  $value = $form_state->getValue($field_name);
  $entity_type = $entity->getEntityTypeId();

  // If field is not unique set error.
  $valid = unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $value[0]['value'], $entity->bundle(), $element['#unique_field_ajax_settings']['per_lang'], $entity);
  if (!$valid && !$element['#unique_field_ajax_settings']['warn_only']) {
    $form_state->setErrorByName($field_name, t('The field @field_label has to be unique.', ['@field_label' => $field_label]));
    $form_state->setRebuild();
  }
}

/**
 * Test if the field value already exist in the database.
 *
 * @param $entity_type
 * @param $langcode
 * @param $field_name
 * @param $field_value
 * @param $bundle
 * @param $is_unique_per_lang
 *
 * @return array|int
 */
function unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $field_value, $bundle, $is_unique_per_lang, $entity) {

  $entity_type_definition = Drupal::entityTypeManager()
    ->getDefinition($entity_type);

  $query = Drupal::entityQuery($entity_type)
    ->condition($field_name, $field_value, '=');

  // Test if the entity has a bundle.
  if (!empty($entity_type_definition->getKey('bundle'))) {
    $query->condition($entity_type_definition->getKey('bundle'), $bundle, '=');
  }

  // Test unique per language.
  if ($is_unique_per_lang) {
    $query->condition('langcode', $langcode);
  }

  $entities = $query->execute();

  if (!empty($entities)) {
    if ($id = $entity->id()) {
      if (!in_array($id, $entities)) {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }

  return TRUE;

}
