<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Symfony\Component\String\UnicodeString;

/**
 * Disable browser's autocomplete for some search fields in expose forms.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function ddbgo_workarounds_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'views_exposed_form') {
    $form['query']['#attributes']['autocomplete'] = 'off';
  }
}

/**
 * Add custom theme for blocks. See module folder templates/.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function ddbgo_workarounds_theme($existing, $type, $theme, $path) {
  return [
    'block__views_block' => [
      'render element' => 'elements',
      'base hook' => 'block',
    ],
  ];
}

/**
 * Disbale Drupal's module updates
 *
 * @param $projects
 */
function ddbgo_workarounds_update_projects_alter(&$projects) {
  unset($projects['ddbgo_workarounds']);
}

/**
 * Implements hook_form_alter() for trimming and normalization of all form
 * inputs.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function ddbgo_workarounds_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Ensure that there is an array here.
  if (!isset($form['#validate'])) {
    $form['#validate'] = [];
  }
  // And if someone has set it as a string, fix that issue. You'd be surprised.
  elseif (!is_array($form['#validate'])) {
    $form['#validate'][] = $form['#validate'];
  }
  // Now add a new function to the list, but ensure that it is called first.
  array_unshift($form['#validate'], 'ddbgo_workarounds_trim_form_values');
}

/**
 * Validation callback function. Trim the values of the form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function ddbgo_workarounds_trim_form_values(&$form, FormStateInterface $form_state) {
  foreach ($form_state->getValues() as $key => $value) {
    ddbgo_workarounds_trim_value($value);
    $form_state->setValue($key, $value);
  }
}

/**
 * Trim string values and recursively trim array values.
 *
 * @param mixed &$value
 *   A string, integer, array, or object of the value.
 */
function ddbgo_workarounds_trim_value(&$value) {
  if (is_array($value)) {
    foreach ($value as &$value2) {
      ddbgo_workarounds_trim_value($value2);
    }
  }
  elseif (is_string($value)) {
    $unicodeString = (new UnicodeString($value))
      ->normalize(UnicodeString::NFC)
      ->trim();
    $value = $unicodeString->toString();
  }
}
