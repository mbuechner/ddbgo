diff --git a/config/schema/unique_field_ajax.schema.yml b/config/schema/unique_field_ajax.schema.yml
index 4be8901..6b50660 100644
--- a/config/schema/unique_field_ajax.schema.yml
+++ b/config/schema/unique_field_ajax.schema.yml
@@ -1,6 +1,6 @@
 field.field.*.*.*.third_party.unique_field_ajax:
   type: mapping
-  label: Unique field third party settings
+  label: 'Unique field third party settings'
   mapping:
     unique:
       type: integer
@@ -11,6 +11,28 @@ field.field.*.*.*.third_party.unique_field_ajax:
     use_ajax:
       type: integer
       label: 'Use ajax'
+    warn_only:
+      type: integer
+      label: 'Set if saving is always possible'
+    message:
+      type: string
+      label: 'A custom error message'
+node.type.*.third_party.unique_field_ajax:
+  type: mapping
+  label: 'Unique field node third party settings'
+  mapping:
+    unique_title:
+      type: integer
+      label: 'Set if node requires unique titles'
+    per_lang:
+      type: integer
+      label: 'Unique per language'
+    use_ajax:
+      type: integer
+      label: 'Use ajax'
+    warn_only:
+      type: integer
+      label: 'Set if saving is always possible'
     message:
       type: string
       label: 'A custom error message'
diff --git a/unique_field_ajax.module b/unique_field_ajax.module
index 67ced79..ab9cff6 100644
--- a/unique_field_ajax.module
+++ b/unique_field_ajax.module
@@ -6,28 +6,39 @@
  */
 
 use Drupal\Component\Utility\NestedArray;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\field\Entity\FieldConfig;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\ContentEntityType;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Core\Field\Entity\BaseFieldOverride;
 
 /**
  * Implements hook_help().
+ * @param $route_name
+ * @param RouteMatchInterface $route_match
+ * @return string
  */
-function unique_field_ajax_help($route_name, RouteMatchInterface $route_match) {
+function unique_field_ajax_help($route_name, RouteMatchInterface $route_match): ?string {
   switch ($route_name) {
     // Main module help for the unique_field_ajax module.
     case 'help.page.unique_field_ajax':
-      $output = '';
-      $output .= '<h3>' . t('About') . '</h3>';
+      $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Unique Field module allows administrators to require that content supplied for specified fields is unique.') . '</p>';
       return $output;
 
     default:
+      return NULL;
   }
 }
 
 /**
  * Implements hook_form_BASE_FORM_ID_alter().
+ * @param $form
+ * @param FormStateInterface $form_state
+ * @param $form_id
  */
 function unique_field_ajax_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
@@ -44,6 +55,14 @@ function unique_field_ajax_form_field_config_edit_form_alter(&$form, FormStateIn
   if (!$field->getFieldStorageDefinition()->isMultiple()) {
     if (in_array($field->getType(), $unique_field_ajax_types)) {
 
+      $form['third_party_settings']['unique_field_ajax'] = array(
+        '#type' => 'details',
+        '#group' => 'additional_settings',
+        '#title' => t('Unique title settings'),
+        '#open' => TRUE,
+        '#tree' => TRUE,
+      );
+
       $form['third_party_settings']['unique_field_ajax']['unique'] = array(
         '#type' => 'checkbox',
         '#title' => t("Unique"),
@@ -77,12 +96,30 @@ function unique_field_ajax_form_field_config_edit_form_alter(&$form, FormStateIn
         ),
       );
 
+      $form['third_party_settings']['unique_field_ajax']['warn_only'] = array(
+        '#type' => 'checkbox',
+        '#title' => t("Warn only"),
+        '#description' => t("Only warn for duplicate content"),
+        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'warn_only'),
+        '#weight' => -6,
+        '#states' => array(
+          // 'checked' => array (
+          //   ':input[name="third_party_settings[unique_field_ajax][use_ajax]"]' => ['checked' => TRUE],
+          // ),
+          'visible' => array(
+            ':input[name="third_party_settings[unique_field_ajax][unique]"]' => ['checked' => TRUE],
+            'and',
+            ':input[name="third_party_settings[unique_field_ajax][use_ajax]"]' => ['checked' => TRUE],
+          ),
+        ),
+      );
+
       $form['third_party_settings']['unique_field_ajax']['message'] = array(
         '#type' => 'textarea',
         '#title' => t("Error message"),
         '#description' => t("The message to show under the field when the value is not unique"),
-        '#default_value' => $field->getThirdPartySetting('unique_field_ajax', 'message'),
-        '#weight' => -7,
+        '#default_value' => empty($field->getThirdPartySetting('unique_field_ajax', 'message')) ? t("The field @field_label has to be unique.") : $field->getThirdPartySetting('unique_field_ajax', 'message'),
+        '#weight' => -5,
         '#states' => array(
           'visible' => array(
             ':input[name="third_party_settings[unique_field_ajax][unique]"]' => array('checked' => TRUE)
@@ -98,12 +135,13 @@ function unique_field_ajax_form_field_config_edit_form_alter(&$form, FormStateIn
  * Attaching data to unique fields.
  *
  * @param $element
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $context
  */
 function unique_field_ajax_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
   $field_definition = $context['items']->getFieldDefinition();
   $name = $field_definition->getFieldStorageDefinition()->getName();
+  $label = $field_definition->getLabel();
   if ($field_definition instanceof FieldConfig) {
     $is_unique_per_lang = NULL;
     if ((\Drupal::moduleHandler()
@@ -117,8 +155,10 @@ function unique_field_ajax_field_widget_form_alter(&$element, FormStateInterface
 
       $element['value']['#unique_field_ajax_settings'] = [
         'per_lang' => $is_unique_per_lang,
+        'warn_only' => $field_definition->getThirdPartySetting('unique_field_ajax', 'warn_only'),
         'field_definition' => $field_definition,
         'field_name' => $name,
+        'field_label' => $label,
       ];
 
       $element['value']['#element_validate'][] = 'unique_field_ajax_validate_unique';
@@ -127,11 +167,61 @@ function unique_field_ajax_field_widget_form_alter(&$element, FormStateInterface
       }
     }
   }
+  // Check if this is the title (base field label) and if the parent entity enforces unique titles.
+  if ($field_definition instanceof BaseFieldDefinition || $field_definition instanceof BaseFieldOverride) {
+    $entity = NULL;
+    // IEF support.
+    if (isset($context['form']) && isset($context['form']['#type']) && $context['form']['#type'] == 'inline_entity_form') {
+      $entity = $context['form']['#default_value'];
+    } else {
+      $form_object = $form_state->getFormObject();
+      if (method_exists($form_object, 'getEntity')) {
+        $entity = $form_object->getEntity();
+      }
+    }
+    if (!$entity) {
+      return;
+    }
+    $entity_type = $entity->getEntityType();
+    if (!($entity_type instanceof ContentEntityType) || !$entity_type->hasKey('label')) {
+      return;
+    }
+    $entity_label = $entity_type->getKey('label');
+    if ($entity_label != $name) {
+      return;
+    }
+    $bundle_def_id = $entity_type->getBundleEntityType();
+    if (!$bundle_def_id) {
+      return;
+    }
+    $bundle_def = \Drupal::service('entity_type.manager')->getStorage($bundle_def_id)->load($entity->bundle());
+    if (!$bundle_def->getThirdPartySetting('unique_field_ajax', 'unique_title')) {
+      return;
+    }
+    $is_unique_per_lang = NULL;
+    if (\Drupal::moduleHandler()->moduleExists('language') && \Drupal::languageManager()->getCurrentLanguage()->getId()) {
+      $is_unique_per_lang = $bundle_def->getThirdPartySetting('unique_field_ajax', 'per_lang');
+    }
+    $use_ajax = $bundle_def->getThirdPartySetting('unique_field_ajax', 'use_ajax');
+
+    $element['value']['#unique_field_ajax_settings'] = array(
+      'per_lang' => $is_unique_per_lang,
+      'warn_only' => $bundle_def->getThirdPartySetting('unique_field_ajax', 'warn_only'),
+      'field_name' => $name,
+      'field_label' => $label,
+      'message' => $bundle_def->getThirdPartySetting('unique_field_ajax', 'message'),
+    );
+
+    $element['value']['#element_validate'][] = 'unique_field_ajax_validate_unique';
+    if ($use_ajax) {
+      $element['#process'] = ['_unique_field_ajax_process'];
+    }
+  }
 }
 
 /**
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @return mixed
  */
 function _unique_field_ajax(array &$form, FormStateInterface $form_state) {
@@ -146,15 +236,15 @@ function _unique_field_ajax(array &$form, FormStateInterface $form_state) {
  * Attach ajax to unique field.
  *
  * @param $element
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form
  *
- * @return mixed
+ * @return array
+ * @throws PluginNotFoundException
  */
-function _unique_field_ajax_process($element, FormStateInterface &$form_state, &$form) {
+function _unique_field_ajax_process($element, FormStateInterface &$form_state, &$form): array {
   $field_name = $element['value']['#unique_field_ajax_settings']['field_name'];
-  $field_definition = $element['value']['#unique_field_ajax_settings']['field_definition'];
-  $field_label = $field_definition->label();
+  $field_label = $element['value']['#unique_field_ajax_settings']['field_label'];
   $wrapper = 'unique-' . $field_name;
   $form['#attached']['library'][] = 'unique_field_ajax/unique_event';
   $settings = array('id' => '#'.$wrapper.' input');
@@ -172,15 +262,20 @@ function _unique_field_ajax_process($element, FormStateInterface &$form_state, &
   $element['value']['#suffix'] = '</div>';
   $value = $form_state->getValue($field_name);
   $value = !empty($value) ? $value[0]['value'] : NULL;
+  if(!isset($value)) {
+    return $element;
+  }
 
   $entity = $form_state->getFormObject()->getEntity();
   $entity_type = $entity->getEntityTypeId();
   $langcode = (!empty($form_state->getValues()['langcode'][0]['value'])) ?
     $form_state->getValues()['langcode'][0]['value'] : '0';
   $valid = unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $value, $entity->bundle(), $element['value']['#unique_field_ajax_settings']['per_lang'], $entity);
-  $message = $field_definition->getThirdPartySetting('unique_field_ajax', 'message');
+  $message = $element['value']['#unique_field_ajax_settings']['message'];
   if (empty($message)) {
-    $message = t('This field has to be unique.');
+    $message = t('The field @field_label has to be unique.', ['@field_label' => $field_label]);
+  } else {
+    $message = t($message, ['@field_label' => $field_label]);
   }
   if (!$valid) {
     $element['value']['#attributes']['class'][] = 'error';
@@ -192,6 +287,10 @@ function _unique_field_ajax_process($element, FormStateInterface &$form_state, &
 
 /**
  * Element Validate callback to validate a field.
+ * @param $element
+ * @param FormStateInterface $form_state
+ * @param array $form
+ * @throws PluginNotFoundException
  */
 function unique_field_ajax_validate_unique($element, FormStateInterface $form_state, array $form) {
   $entity = $form_state->getFormObject()->getEntity();
@@ -202,18 +301,22 @@ function unique_field_ajax_validate_unique($element, FormStateInterface $form_st
       $form_state->getValues()['langcode'][0]['value'] : '0';
 
   $field_name = $element['#unique_field_ajax_settings']['field_name'];
-  $field_definition = $element['#unique_field_ajax_settings']['field_definition'];
-  $field_label = $field_definition->label();
-  $message = $field_definition->getThirdPartySetting('unique_field_ajax', 'message');
+  $field_label = $element['#unique_field_ajax_settings']['field_label'];
+  $message = $element['#unique_field_ajax_settings']['message'];
   if (empty($message)) {
     $message = t('The field @field_label has to be unique.', ['@field_label' => $field_label]);
+  } else {
+    $message = t($message, ['@field_label' => $field_label]);
   }
   $value = $form_state->getValue($field_name);
+  if(!isset($value)) {
+    return;
+  }
   $entity_type = $entity->getEntityTypeId();
 
   // If field is not unique set error.
   $valid = unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $value[0]['value'], $entity->bundle(), $element['#unique_field_ajax_settings']['per_lang'], $entity);
-  if (!$valid) {
+  if (!$valid  && !boolval($element['#unique_field_ajax_settings']['warn_only'])) {
     $form_state->setErrorByName($field_name, $message);
     $form_state->setRebuild();
   }
@@ -228,11 +331,11 @@ function unique_field_ajax_validate_unique($element, FormStateInterface $form_st
  * @param $field_value
  * @param $bundle
  * @param $is_unique_per_lang
- *
- * @return array|int
+ * @param $entity
+ * @return bool
+ * @throws PluginNotFoundException
  */
-function unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $field_value, $bundle, $is_unique_per_lang, $entity) {
-
+function unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $field_value, $bundle, $is_unique_per_lang, $entity): bool {
   $entity_type_definition = Drupal::entityTypeManager()
     ->getDefinition($entity_type);
 
@@ -251,17 +354,160 @@ function unique_field_ajax_is_unique($entity_type, $langcode, $field_name, $fiel
 
   $entities = $query->execute();
 
-  if (!empty($entities)) {
-    if ($id = $entity->id()) {
-      if (!in_array($id, $entities)) {
-        return FALSE;
-      }
-    }
-    else {
+  if (empty($entities)) {
+    return TRUE;
+  }
+
+  // remove self from array
+  $id = $entity->id();
+  if($id && ($key = array_search($id, $entities, true)) !== false) {
+      unset($entities[$key]);
+  }
+
+  // if entities left, than NOT valid
+  if(count($entities) > 0) {
       return FALSE;
-    }
   }
 
   return TRUE;
+}
+
+/**
+ * Alter forms to add unique title checkbox
+ *   - node type add/edit.
+ *
+ * @param [type] $form
+ * @param FormStateInterface $form_state
+ * @param [type] $form_id
+ *
+ * @return void
+ */
+function unique_field_ajax_form_alter(&$form, FormStateInterface $form_state, $form_id) {
+  if (_unique_field_ajax_is_config_form($form_id)) {
+    $entity = $form_state->getFormObject()->getEntity();
 
+    $form['unique_field_ajax'] = array(
+      '#type' => 'details',
+      '#group' => 'additional_settings',
+      '#title' => t('Unique title settings'),
+      '#open' => TRUE,
+      '#tree' => TRUE,
+    );
+    $form['unique_field_ajax']['unique_field_ajax_unique_title'] = array(
+      '#type' => 'checkbox',
+      '#title' => t("Enable unique title"),
+      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'unique_title'),
+      '#description' => t('Validate that nodes within this bundle do not have duplicate titles'),
+      '#weight' => -10,
+    );
+    $form['unique_field_ajax']['unique_field_ajax_per_lang'] = array(
+      '#type' => 'checkbox',
+      '#title' => t("Per Language"),
+      '#description' => t("Do not allow duplicated content per language"),
+      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'per_lang'),
+      '#weight' => -9,
+      '#states' => array(
+        'visible' => array(
+          ':input[name="unique_field_ajax[unique_field_ajax_unique_title]"]' => ['checked' => TRUE],
+        ),
+      ),
+    );
+    $form['unique_field_ajax']['unique_field_ajax_use_ajax'] = array(
+      '#type' => 'checkbox',
+      '#title' => t("Use Ajax"),
+      '#description' => t("Use ajax for validation."),
+      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'use_ajax'),
+      '#weight' => -8,
+      '#states' => array(
+        'visible' => array(
+          ':input[name="unique_field_ajax[unique_field_ajax_unique_title]"]' => ['checked' => TRUE],
+        ),
+      ),
+    );
+    $form['unique_field_ajax']['unique_field_ajax_warn_only'] = array(
+      '#type' => 'checkbox',
+      '#title' => t("Warn only"),
+      '#description' => t("Only warn for duplicate content"),
+      '#default_value' => $entity->getThirdPartySetting('unique_field_ajax', 'warn_only'),
+      '#weight' => -7,
+      '#states' => array(
+        'visible' => array(
+          ':input[name="unique_field_ajax[unique_field_ajax_unique_title]"]' => ['checked' => TRUE],
+          'and',
+          ':input[name="unique_field_ajax[unique_field_ajax_use_ajax]"]' => ['checked' => TRUE],
+        ),
+      ),
+    );
+    $form['unique_field_ajax']['unique_field_ajax_message'] = array(
+      '#type' => 'textarea',
+      '#title' => t("Error message"),
+      '#description' => t("The message to show under the field when the value is not unique"),
+      '#default_value' => empty($entity->getThirdPartySetting('unique_field_ajax', 'message')) ? t("The field @field_label has to be unique.") : $entity->getThirdPartySetting('unique_field_ajax', 'message'),
+      '#weight' => -6,
+      '#states' => array(
+        'visible' => array(
+          ':input[name="unique_field_ajax[unique_field_ajax_unique_title]"]' => ['checked' => TRUE],
+        ),
+      ),
+    );
+
+    $form['#entity_builders'][] = '_unique_field_ajax_entity_form_builder';
+  }
+}
+
+/**
+ * Save the third-party setting.
+ *
+ * @param [type] $entity_type
+ * @param EntityInterface $entity
+ * @param [type] $form
+ * @param FormStateInterface $form_state
+ *
+ * @return void
+ */
+function _unique_field_ajax_entity_form_builder($entity_type, EntityInterface $entity, &$form, FormStateInterface $form_state) {
+
+  if ($form_state->getValue(['unique_field_ajax', 'unique_field_ajax_unique_title'])) {
+    $entity->setThirdPartySetting('unique_field_ajax', 'unique_title', $form_state->getValue(['unique_field_ajax', 'unique_field_ajax_unique_title']));
+  }
+  else {
+    $entity->unsetThirdPartySetting('unique_field_ajax', 'unique_title');
+  }
+
+  if ($form_state->getValue(['unique_field_ajax', 'unique_field_ajax_warn_only'])) {
+    $entity->setThirdPartySetting('unique_field_ajax', 'warn_only', $form_state->getValue(['unique_field_ajax', 'unique_field_ajax_warn_only']));
+  }
+  else {
+    $entity->unsetThirdPartySetting('unique_field_ajax', 'warn_only');
+  }
+
+  if ($form_state->getValue(['unique_field_ajax', 'unique_field_ajax_per_lang'])) {
+    $entity->setThirdPartySetting('unique_field_ajax', 'per_lang', $form_state->getValue(['unique_field_ajax', 'unique_field_ajax_per_lang']));
+  }
+  else {
+    $entity->unsetThirdPartySetting('unique_field_ajax', 'per_lang');
+  }
+
+  if ($form_state->getValue(['unique_field_ajax', 'unique_field_ajax_use_ajax'])) {
+    $entity->setThirdPartySetting('unique_field_ajax', 'use_ajax', $form_state->getValue(['unique_field_ajax', 'unique_field_ajax_use_ajax']));
+  }
+  else {
+    $entity->unsetThirdPartySetting('unique_field_ajax', 'use_ajax');
+  }
+
+  $entity->setThirdPartySetting('unique_field_ajax', 'message', $form_state->getValue(['unique_field_ajax', 'unique_field_ajax_message']));
+}
+
+/**
+ * Determine if this is a form for titleable entity config.
+ *
+ * @param string $form_id
+ * @return bool
+ */
+function _unique_field_ajax_is_config_form(string $form_id): bool {
+  $entity_config_forms = array(
+    'node_type_edit_form',
+    'node_type_add_form',
+  );
+  return in_array($form_id, $entity_config_forms);
 }
